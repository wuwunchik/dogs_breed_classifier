import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import wikipedia
import wikipediaapi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
wikipedia.set_lang("ru")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wikipedia API –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –ø–æ–∏—Å–∫–∞
wiki = wikipediaapi.Wikipedia('ru')

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏
def get_wiki_page(title):
    page = wiki.page(title)
    if page.exists():
        return {
            "title": page.title,
            "summary": page.summary[:500] + "...",  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
            "url": page.fullurl
        }
    return {
        "title": title,
        "summary": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî",
        "url": "#"
    }

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ—Ä–æ–¥—ã (–∑–∞–º–µ–Ω–∞ "_" –Ω–∞ –ø—Ä–æ–±–µ–ª—ã)
def format_class_name(class_name):
    return class_name.replace("_", " ")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∫–ª–∞—Å—Å–æ–≤
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("dogs_model.keras")

@st.cache_data
def load_class_names():
    with open("class_names.txt", "r") as f:
        return [line.strip() for line in f.readlines()]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∏–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
model = load_model()
class_names = load_class_names()

st.title("üê∂ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    img = image.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_batch = np.expand_dims(img_array, axis=0)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –º–æ–¥–µ–ª–∏
    prediction = model.predict(img_batch)
    predicted_class = class_names[np.argmax(prediction)]  # –ö–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ—Ä–æ–¥—ã
    formatted_name = format_class_name(predicted_class)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏
    wiki_info = get_wiki_page(formatted_name)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.markdown(f"""
    <div style="text-align: center; padding-top: 20px;">
        <h3>üêæ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞: <b>{wiki_info['title']}</b></h3>
        <p style="font-size: 16px;">{wiki_info['summary']}</p>
        <a href="{wiki_info['url']}" target="_blank" style="font-size: 15px; color: #1f77b4;">–û—Ç–∫—Ä—ã—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏</a>
    </div>
    """, unsafe_allow_html=True)
